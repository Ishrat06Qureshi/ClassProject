WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.265
Now, what we currently have is fine.

00:00:02.265 --> 00:00:04.245
But most of the time when you need a list,

00:00:04.245 --> 00:00:06.690
you'll probably have the items in an array somewhere.

00:00:06.690 --> 00:00:09.465
Instead of writing out child elements one by one,

00:00:09.465 --> 00:00:12.945
React lets us provide an array of elements to use as children.

00:00:12.945 --> 00:00:16.500
This makes it easier to work with existing arrays of data.

00:00:16.500 --> 00:00:19.830
So, let's say we have an array here of

00:00:19.830 --> 00:00:24.495
people that we want to dynamically generate these list items from this array.

00:00:24.495 --> 00:00:27.600
We could just map over the people array.

00:00:27.600 --> 00:00:29.235
And for each person,

00:00:29.235 --> 00:00:31.860
we will generate a list item.

00:00:31.860 --> 00:00:33.780
And instead of hard-coding the name here,

00:00:33.780 --> 00:00:35.865
we will just use person.name.

00:00:35.865 --> 00:00:37.740
And we'll get the same result.

00:00:37.740 --> 00:00:41.250
The thing I like about using JavaScript to generate

00:00:41.250 --> 00:00:46.905
these elements is that I didn't need any special syntax to map over the array.

00:00:46.905 --> 00:00:49.590
Instead, I just used array.map.

00:00:49.590 --> 00:00:52.890
So, I didn't need a templating language to give me

00:00:52.890 --> 00:00:57.840
some repeat or mapping or each syntax to loop over the array.

00:00:57.840 --> 00:01:00.585
I can use JavaScript which I already know.

00:01:00.585 --> 00:01:05.910
Another thing that's interesting here is that this person object was already in scope.

00:01:05.910 --> 00:01:10.555
So, I didn't need a templating language to give me that concept of scope.

00:01:10.555 --> 00:01:14.645
I just use the person object in the JavaScript function scope.

00:01:14.645 --> 00:01:16.565
There's nothing new to learn here.

00:01:16.565 --> 00:01:18.110
Now one thing to note,

00:01:18.110 --> 00:01:20.690
when you're using an array as children is that

00:01:20.690 --> 00:01:23.930
React is going to complain if you don't give it a key.

00:01:23.930 --> 00:01:28.040
So, if we look at the console here in the browser, you'll see a warning.

00:01:28.040 --> 00:01:32.345
Each child in an array or iterator should have a unique "key" prop.

00:01:32.345 --> 00:01:34.408
Check the top-level render call using ol.

00:01:34.408 --> 00:01:36.335
What does that mean?

00:01:36.335 --> 00:01:39.470
Well, remember, when we added the class name to the div,

00:01:39.470 --> 00:01:41.540
this second argument here,

00:01:41.540 --> 00:01:43.745
these are the props here to our component.

00:01:43.745 --> 00:01:46.744
So, let's give this item a unique key prop.

00:01:46.744 --> 00:01:50.165
Something that is unique about each of these objects.

00:01:50.165 --> 00:01:54.875
In this case, the name would work because that's unique for each of the objects.

00:01:54.875 --> 00:01:57.514
So, you'll notice here that the warning goes away.

00:01:57.514 --> 00:02:02.090
Now, we're not going to go too deep into the key prop in this lesson.

00:02:02.090 --> 00:02:04.910
But know that if you are mapping over an array with

00:02:04.910 --> 00:02:08.045
React and you're creating elements for each item in that array,

00:02:08.045 --> 00:02:10.820
each element needs its own unique key prop

